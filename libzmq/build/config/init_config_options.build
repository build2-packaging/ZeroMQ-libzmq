is_windows = ($cxx.target.class == 'windows')
is_mingw = ($cxx.target.system = 'mingw32')
is_linux = ($cxx.target.class == 'linux')
is_macos = ($cxx.target.class == 'macos')

config [bool] config.libzmq.enable_intrinsics ?= false
config [bool] config.libzmq.enable_ws ?= true
config [bool] config.libzmq.enable_radix_tree ?= false
config [bool] config.libzmq.enable_gnutls ?= false
config [bool] config.libzmq.enable_ipc ?= (!$is_windows)
config [bool] config.libzmq.enable_tipc ?= $is_linux
config [bool] config.libzmq.enable_militant_assert ?= false

# mode for polling, can be:
# kqueue, epoll, devpoll, pollset, poll, select
config [string] config.libzmq.poll_mode

if! $defined(config.libzmq.poll_mode)
{
    poll_mode =
    # determine the mode based on the target platform
    switch $cxx.target.class
    {
        case 'windows'
        {
            poll_mode = 'epoll'
        }
        case 'macos'
        {
            poll_mode = 'kqueue'
        }
        case 'linux'
        {
            poll_mode = 'select'
        }
        default
        {
            poll_mode = 'select'
        }
    }

    config config.libzmq.poll_mode ?= $poll_mode
}

# mode for calling pthread_setname variants, values can be:
# none, setname_1, setname_2, setname_3, set_name
config [string] config.libzmq.pthread_setname_mode

if! $defined(config.libzmq.pthread_setname_mode)
{
    pthread_setname_mode =
    # determine the mode based on the target platform
    switch $cxx.target.class
    {
        case 'macos'
        {
            pthread_setname_mode = 'setname_1'
        }
        case 'linux'
        {
            pthread_setname_mode = 'setname_2'
        }
        case 'windows'
        {
            pthread_setname_mode = 'none'
        }
        default
        {
            pthread_setname_mode = 'setname_1'
        }
    }

    config config.libzmq.pthread_setname_mode ?= $pthread_setname_mode
}

# forces to use mutexes instead of atomic variables (in case no atomics are available)
config [bool] config.libzmq.force_mutexes ?= false

# typically unix specific definitions
config [bool] config.libzmq.use_fork ?= (!$is_windows)
config [bool] config.libzmq.use_clock_gettime ?= (!$is_windows)
config [bool] config.libzmq.use_gethrtime ?= ((!$is_windows) && (!$is_linux))
config [bool] config.libzmq.use_mkdtemp ?= (!$is_windows)
config [bool] config.libzmq.use_uio ?= (!$is_windows)

config [bool] config.libzmq.use_eventfd ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_eventfd_cloexec ?= (!$is_windows && (!$is_macos))
config [bool] config.libzmq.use_ifaddrs ?= (!$is_windows)
config [bool] config.libzmq.use_so_bindtodevice ?= ((!$is_windows) && (!$is_macos))

config [bool] config.libzmq.use_so_peercred ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_local_peercred ?= ((!$is_windows) && (!$is_linux) && (!$is_macos))
config [bool] config.libzmq.use_o_cloexec ?= (!$is_windows)

config [bool] config.libzmq.use_sock_cloexec ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_so_keepalive ?= (!$is_windows)
config [bool] config.libzmq.use_so_priority ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_tcp_keepcnt ?= (!$is_windows)
config [bool] config.libzmq.use_tcp_keepidle ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_tcp_keepintvl ?= (!$is_windows)
config [bool] config.libzmq.use_tcp_keepalive ?= (!$is_windows)

config [bool] config.libzmq.use_pthread_set_affinity ?= (!$is_windows)
config [bool] config.libzmq.use_accept4 ?= ((!$is_windows) && (!$is_macos))
config [bool] config.libzmq.use_strnlen ?= ((!$is_windows) || $is_mingw)
config [bool] config.libzmq.use_strlcpy ?= ((!$is_windows) && (!$is_linux))

# TODO check if we are on Windows 10 at least
config [bool] config.libzmq.use_windows_uwp ?= false

config [uint64] config.libzmq.cacheline_size ?= 64
