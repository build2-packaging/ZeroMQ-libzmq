# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

# currently using libsodium is not supported, still replicate the behavior of upstream
use_libsodium = false
use_tweetnacl = ($config.libzmq.enable_curve && (!$use_libsodium))

lib{zmq}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
lib{zmq}: hxx{platform}
lib{zmq}: src/{hxx cxx}{* -ws_* -wss_* -tipc_*} src/hxx{*} src/h{zmq_draft}
lib{zmq}: src/{h c}{tweetnacl}: include = $use_tweetnacl
lib{zmq}: src/{hxx cxx}{ws_*}: include = $config.libzmq.enable_ws
lib{zmq}: src/{hxx cxx}{wss_*}: include = ($config.libzmq.enable_ws && $config.libzmq.enable_gnutls)
lib{zmq}: src/{hxx cxx}{tipc_*}: include = $config.libzmq.enable_tipc
lib{zmq}: external/sha1/{h c}{*}: include = (!$config.libzmq.enable_gnutls)
lib{zmq}: external/wepoll/{h c}{*}: include = ($is_windows && ($config.libzmq.poll_mode == 'epoll'))

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

impl_poptions =
impl_poptions += "-I$out_pfx_inc" "-I$src_pfx_inc" \
                 "-I$out_pfx_src" "-I$src_pfx_src" \

# always use STL11 condition variable, do not bother with pthread and windows alternatives
impl_poptions += -DZMQ_USE_CV_IMPL_STL11

# always use noexcept, do not bother with a config option
# should be supported by most compilers
impl_poptions += -DZMQ_HAVE_NOEXCEPT

impl_poptions += "-DZMQ_CACHELINE_SIZE=$config.libzmq.cacheline_size"

config_flags = \
    $config.libzmq.enable_intrinsics \
    $config.libzmq.enable_radix_tree \
    $config.libzmq.force_mutexes \
    $config.libzmq.use_fork \
    $config.libzmq.use_clock_gettime \
    $config.libzmq.use_gethrtime \
    $config.libzmq.use_mkdtemp \
    $config.libzmq.use_uio \
    $config.libzmq.use_eventfd \
    $config.libzmq.use_eventfd_cloexec \
    $config.libzmq.use_ifaddrs \
    $config.libzmq.use_so_bindtodevice \
    $config.libzmq.use_so_peercred \
    $config.libzmq.use_local_peercred \
    $config.libzmq.use_o_cloexec \
    $config.libzmq.use_sock_cloexec \
    $config.libzmq.use_so_keepalive \
    $config.libzmq.use_so_priority \
    $config.libzmq.use_tcp_keepcnt \
    $config.libzmq.use_tcp_keepidle \
    $config.libzmq.use_tcp_keepintvl \
    $config.libzmq.use_tcp_keepalive \
    $config.libzmq.use_pthread_set_affinity \
    $config.libzmq.use_accept4 \
    $config.libzmq.use_strnlen \
    $config.libzmq.use_strlcpy \
    $config.libzmq.enable_ipc \
    $config.libzmq.enable_tipc \
    $config.libzmq.enable_gnutls \
    (!$config.libzmq.enable_gnutls) \
    $config.libzmq.enable_militant_assert \
    $config.libzmq.enable_ws \
    ($config.libzmq.enable_ws && $config.libzmq.enable_gnutls) \
    $is_windows \
    ($is_windows && $config.libzmq.use_windows_uwp) \
    $config.libzmq.enable_curve \
    $use_tweetnacl \
    $use_libsodium \
    $config.libzmq.enable_drafts

config_poptions = \
    ZMQ_HAVE_ATOMIC_INTRINSICS \
    ZMQ_USE_RADIX_TREE \
    ZMQ_FORCE_MUTEXES \
    HAVE_FORK \
    HAVE_CLOCK_GETTIME \
    HAVE_GETHRTIME \
    HAVE_MKDTEMP \
    ZMQ_HAVE_UIO \
    ZMQ_HAVE_EVENTFD \
    ZMQ_HAVE_EVENTFD_CLOEXEC \
    ZMQ_HAVE_IFADDRS \
    ZMQ_HAVE_SO_BINDTODEVICE \
    ZMQ_HAVE_SO_PEERCRED \
    ZMQ_HAVE_LOCAL_PEERCRED \
    ZMQ_HAVE_O_CLOEXEC \
    ZMQ_HAVE_SOCK_CLOEXEC \
    ZMQ_HAVE_SO_KEEPALIVE \
    ZMQ_HAVE_SO_PRIORITY \
    ZMQ_HAVE_TCP_KEEPCNT \
    ZMQ_HAVE_TCP_KEEPIDLE \
    ZMQ_HAVE_TCP_KEEPINTVL \
    ZMQ_HAVE_TCP_KEEPALIVE \
    ZMQ_HAVE_PTHREAD_SET_AFFINITY \
    HAVE_ACCEPT4 \
    HAVE_STRNLEN \
    ZMQ_HAVE_STRLCPY \
    ZMQ_HAVE_IPC \
    ZMQ_HAVE_TIPC \
    ZMQ_USE_GNUTLS \
    ZMQ_USE_BUILTIN_SHA1 \
    ZMQ_ACT_MILITANT \
    ZMQ_HAVE_WS \
    ZMQ_HAVE_WSS \
    ZMQ_HAVE_WINDOWS \
    ZMQ_HAVE_WINDOWS_UWP \
    ZMQ_HAVE_CURVE \
    ZMQ_USE_TWEETNACL \
    ZMQ_USE_LIBSODIUM \
    ZMQ_BUILD_DRAFT_API

for i: $integer_sequence(0, $size($config_poptions))
{
    flag = ($config_flags[$i])
    opt = ($config_poptions[$i])
    if $flag
    {
        impl_poptions += -D$opt
    }
}

switch $config.libzmq.pthread_setname_mode
{
    case 'none'
    {
        # for systems without pthread we add no poptions
    }
    case 'setname_1'
    {
        impl_poptions += -DZMQ_HAVE_PTHREAD_SETNAME_1
    }
    case 'setname_2'
    {
        impl_poptions += -DZMQ_HAVE_PTHREAD_SETNAME_2
    }
    case 'setname_3'
    {
        impl_poptions += -DZMQ_HAVE_PTHREAD_SETNAME_3
    }
    case 'set_name'
    {
        impl_poptions += -DZMQ_HAVE_PTHREAD_SET_NAME
    }

    default
    {
        fail "invalid pthread_setname_mode $config.libzmq.pthread_setname_mode"
    }
}

switch $config.libzmq.poll_mode
{
    case 'kqueue'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_KQUEUE \
                         -DZMQ_POLL_BASED_ON_POLL
    }
    case 'epoll'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_EPOLL \
                        -DZMQ_POLL_BASED_ON_POLL
    }
    case 'devpoll'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_DEVPOLL \
                         -DZMQ_POLL_BASED_ON_POLL
    }
    case 'pollset'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_POLLSET \
                         -DZMQ_POLL_BASED_ON_POLL
    }
    case 'poll'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_POLL \
                        -DZMQ_POLL_BASED_ON_POLL
    }
    case 'select'
    {
        impl_poptions += -DZMQ_IOTHREAD_POLLER_USE_SELECT \
                         -DZMQ_POLL_BASED_ON_SELECT
    }
    default
    {
        fail "invalid poll mode $config.libzmq.poll_mode"
    }
}

switch $cc.target.class
{
    case 'windows'
    {
        if ($cc.target.system == 'mingw32')
        {
            cc.libs += -lws2_32 -lrpcrt4 -liphlpapi -ladvapi32
        }
        else
        {
            cc.libs += ws2_32.lib rpcrt4.lib iphlpapi.lib advapi32.lib
        }
    }
    case 'macos'
    {
        cc.libs += -pthread
    }
    default
    {
        cc.libs += -pthread -lrt
    }
}

cc.poptions += $impl_poptions
{hbmia obja}{*}: cc.poptions += -DZMQ_STATIC

# Export options.
lib{zmq}:
{
  cc.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
}

liba{zmq}: cc.export.poptions += -DZMQ_STATIC

# create a separate target which exports the private poptions
# these are required by the tests
[rule_hint=cxx] lib{zmq_test}: lib{zmq}
lib{zmq_test}:
{
  cc.export.poptions = $impl_poptions
  cc.export.libs = lib{zmq}
}

./: lib{zmq} lib{zmq_test}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
  lib{zmq}: bin.lib.version = "-$version.project_id"
else
  lib{zmq}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx}{*}: install = false
